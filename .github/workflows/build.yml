name: "Build index.js for GitHub Action"
#TODO: Add a webhook to my action to trigger action action-main(exceute scan-dockerfile)
on:
  push:
    branches:
      - main
      - develop
      - feature/*
      - feat/*
      - fix/*
      - hotfix/*
    paths-ignore:
      - "**.md"
      - "dist/**" #avoid infinite loop
      - ".github/workflows/**"
      - ".gitignore"
      - ".vscode/**"
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Build the action
        run: npm run build

      - name: Commit and push built action
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add dist/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "ü§ñ Update built action"
            git push
          fi

      - name: Upload built action
        uses: actions/upload-artifact@v4
        with:
          name: action
          path: dist
  test-execution:
    #TODO Make a matrix to run tests in parallel and use only steps. using variable
    runs-on: ubuntu-latest
    needs: build
    env:
      # ‚úÖ Vari√°veis parametriz√°veis do job
      TEST_TOKEN: ${{ secrets.TOKEN_API_GIT }}
      TEST_REPO_1: "joao-pedro-rdo/teste-scan"
      TEST_REPO_2: "joao-pedro-rdo/action-main"
      COMMIT_MESSAGE: ${{ github.event.head_commit.message }}
      COMMIT_SHA: ${{ github.sha }}
      BRANCH: ${{ github.ref_name }}

    steps:
      - name: ‚úÖ Test Action
        env:
          TARGET_REPO: ${{ env.TEST_REPO_1 }}
        run: |
          # ‚úÖ Gerar EVENT_TYPE dentro do script
          EVENT_TYPE="$(echo "$COMMIT_MESSAGE" | head -c 30 | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')-$(date +'%Y%m%d-%H%M%S')"

          echo "üöÄ Triggering test on repository: $TARGET_REPO"
          echo "üìù Event type: $EVENT_TYPE"
          echo "üìù Commit: $COMMIT_MESSAGE"
          echo "üìù SHA: $COMMIT_SHA"
          echo "üìù Branch: $BRANCH"

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TEST_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$TARGET_REPO/dispatches \
            -d "{\"event_type\":\"$EVENT_TYPE\", \"client-payload\":{\"commit\":\"$COMMIT_MESSAGE\",\"sha\":\"$COMMIT_SHA\",\"branch\":\"$BRANCH\"}}"

          echo "‚úÖ Test dispatch sent successfully"

      - name: ‚úÖ Test Action 2
        env:
          TARGET_REPO: ${{ env.TEST_REPO_2 }}
        run: |
          # ‚úÖ Gerar EVENT_TYPE dentro do script
          EVENT_TYPE="$(echo "$COMMIT_MESSAGE" | head -c 30 | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g')-$(date +'%Y%m%d-%H%M%S')"

          echo "üöÄ Triggering test on repository: $TARGET_REPO"
          echo "üìù Event type: $EVENT_TYPE"
          echo "üìù Commit: $COMMIT_MESSAGE"
          echo "üìù SHA: $COMMIT_SHA"
          echo "üìù Branch: $BRANCH"

          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TEST_TOKEN" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/$TARGET_REPO/dispatches \
            -d "{\"event_type\":\"$EVENT_TYPE\, \"client-payload\":{\"commit\":\"$COMMIT_MESSAGE\",\"sha\":\"$COMMIT_SHA\",\"branch\":\"$BRANCH\"}}"

          echo "‚úÖ Test dispatch sent successfully"
